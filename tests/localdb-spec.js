// Generated by CoffeeScript 1.7.1
'use strict';
var LocalDB, expect,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

expect = require('expect.js');

LocalDB = require('../src/localdb.js');

describe('LocalDB', function() {
  var collection, db;
  it('LocalStorage Support', function() {
    return expect(LocalDB.isSupport()).to.be.ok();
  });
  it('Init DB', function() {
    var db;
    db = new LocalDB("db_foo");
    return expect(db).to.be.a("object");
  });
  it('Drop DB', function() {
    var db;
    db = new LocalDB("db_foo");
    return expect(db.drop()).to.be.ok();
  });
  db = new LocalDB("db_foo");
  it('Drop Collection By DB', function() {
    db.drop("collection_bar");
    return expect(collection.find().length).to.be(0);
  });
  it('Drop COllection By Collection', function() {
    var collection;
    collection = db.collection("collection_bar");
    collection.drop();
    return expect(collection.find().length).to.be(0);
  });
  collection = db.collection("collection_bar");
  it('Insert Data', function() {
    collection.insert({
      a: 1,
      b: 2,
      c: 3,
      d: {
        e: "4",
        f: 5
      }
    });
    collection.insert({
      a: 2,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 3,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 4,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 5,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 6,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 7,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 8,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 10,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 11,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 12,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 13,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 14,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    collection.insert({
      a: 15,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      }
    });
    return expect(collection.find().length).to.be(14);
  });
  it('Get Collections', function() {
    var collections;
    collections = db.collections();
    console.log(collections);
    return expect(db.collections()).to.be.a("array");
  });
  it('Get Collection', function() {
    collection = db.collection("collection_bar");
    return expect(collection).to.be.a("object");
  });
  it('Update Data', function() {
    collection.update({
      $set: {
        b: 4,
        c: 5
      }
    }, {
      criteria: {
        a: {
          $gt: 3,
          $lt: 10
        },
        d: {
          e: 4
        }
      }
    });
    expect(collection.find()[6].b).to.be(4);
    return expect(collection.find()[6].c).to.be(5);
  });
  it('find', function() {
    var data;
    data = collection.find({
      criteria: {
        a: {
          $lt: 3
        },
        b: 2
      },
      projection: {
        a: 1,
        b: 1,
        c: 0
      },
      limit: 4
    });
    console.log(data);
    return expect(data).to.be.a("array");
  });
  it('Fine One Data', function() {
    var data;
    data = collection.findOne({
      criteria: {
        a: {
          $lt: 3
        }
      }
    });
    console.log(data);
    return expect(data.length).to.be(1 || 0);
  });
  it('$in', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        a: {
          $in: [3, 4, 5]
        }
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      _results.push(expect(d.a).to.be.within(3, 5));
    }
    return _results;
  });
  it('$nin', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        a: {
          $nin: [3, 4, 5]
        }
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      _results.push(expect(d.a).not.to.be.within(3, 5));
    }
    return _results;
  });
  it('$and', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        $and: [
          {
            b: 4
          }, {
            a: 5
          }
        ]
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      _results.push(expect(d.b).to.be(4));
    }
    return _results;
  });
  it('$not', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        $not: {
          b: 4
        }
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      _results.push(expect(d.b).not.to.be(4));
    }
    return _results;
  });
  it('$nor', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        $nor: [
          {
            b: 4
          }, {
            a: 1
          }, {
            a: 2
          }
        ]
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      expect(d.b).not.to.be(4);
      expect(d.a).not.to.be(1);
      _results.push(expect(d.a).not.to.be(2));
    }
    return _results;
  });
  it('$or', function() {
    var data;
    data = collection.find({
      criteria: {
        $or: [
          {
            a: 1
          }, {
            a: 2
          }
        ]
      }
    });
    console.log(data);
    return expect(data).to.be.eql([
      {
        "a": 1,
        "b": 2,
        "c": 3,
        "d": {
          "e": 4,
          "f": 5
        }
      }, {
        "a": 2,
        "b": 2,
        "c": 3,
        "d": {
          "e": 4,
          "f": 5
        }
      }
    ]);
  });
  it('$exist', function() {
    var d, data, _i, _j, _len, _len1, _results;
    data = collection.find({
      criteria: {
        a: {
          $exist: false
        }
      }
    });
    console.log(data);
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      expect(d.a != null).not.to.be.ok();
    }
    data = collection.find({
      criteria: {
        a: {
          $exist: true
        }
      }
    });
    console.log(data);
    _results = [];
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      d = data[_j];
      _results.push(expect(d.a != null).to.be.ok());
    }
    return _results;
  });
  it('$exist', function() {
    var data;
    data = collection.find({
      criteria: {
        a: {
          $type: "number"
        },
        b: {
          $type: "number"
        },
        d: {
          $type: "object",
          e: {
            $type: "string"
          }
        }
      }
    });
    console.log(data);
    return expect(data).to.be.eql([
      {
        "a": 1,
        "b": 2,
        "c": 3,
        "d": {
          "e": "4",
          "f": 5
        }
      }
    ]);
  });
  it('$mod', function() {
    var d, data, _i, _len, _results;
    data = collection.find({
      criteria: {
        a: {
          $mod: [4, 0]
        }
      }
    });
    console.log(data);
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      _results.push(expect(d.a % 4).to.be(0));
    }
    return _results;
  });
  it('$regex', function() {
    var d, data, _i, _j, _len, _len1, _results;
    collection.insert({
      a: 15,
      b: 2,
      c: 3,
      d: {
        e: 4,
        f: 5
      },
      g: "Hello World"
    });
    data = collection.find({
      criteria: {
        g: {
          $regex: 'ello'
        }
      }
    });
    console.log(data);
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      expect(/ello/.test(d.g)).to.be.ok();
    }
    data = collection.find({
      criteria: {
        g: /ello/
      }
    });
    console.log(data);
    _results = [];
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      d = data[_j];
      _results.push(expect(/ello/.test(d.g)).to.be.ok());
    }
    return _results;
  });
  it('$all', function() {
    var d, data, _i, _j, _k, _l, _len, _len1, _len2, _len3, _results;
    collection.insert({
      a: 1,
      b: 2,
      c: 3,
      h: [1, 2, 3, 4],
      i: [[1, 2, 3], [1, 2, 4]]
    });
    data = collection.find({
      criteria: {
        h: {
          $all: [1, 2]
        }
      }
    });
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      expect(__indexOf.call(d.h, 1) >= 0).to.be.ok();
    }
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      d = data[_j];
      expect(__indexOf.call(d.h, 2) >= 0).to.be.ok();
    }
    data = collection.find({
      criteria: {
        i: {
          $all: [[1, 2]]
        }
      }
    });
    for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
      d = data[_k];
      expect(__indexOf.call(d.i[0], 1) >= 0).to.be.ok();
    }
    _results = [];
    for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
      d = data[_l];
      _results.push(expect(__indexOf.call(d.i[0], 2) >= 0).to.be.ok());
    }
    return _results;
  });
  it('$elemMatch', function() {
    var data;
    collection.insert({
      _id: 1,
      results: [
        {
          product: "abc",
          score: 10
        }, {
          product: "xyz",
          score: 5
        }
      ]
    });
    collection.insert({
      _id: 2,
      results: [
        {
          product: "abc",
          score: 8
        }, {
          product: "xyz",
          score: 7
        }
      ]
    });
    collection.insert({
      _id: 3,
      results: [
        {
          product: "abc",
          score: 7
        }, {
          product: "xyz",
          score: 8
        }
      ]
    });
    data = collection.find({
      criteria: {
        results: {
          $elemMatch: {
            product: "xyz",
            score: {
              $gte: 8
            }
          }
        }
      }
    });
    console.log(data);
    return expect(data).to.be.eql([
      {
        "_id": 3,
        "results": [
          {
            "product": "abc",
            "score": 7
          }, {
            "product": "xyz",
            "score": 8
          }
        ]
      }
    ]);
  });
  it('$size', function() {
    var data;
    data = collection.find({
      criteria: {
        results: {
          $size: 2
        }
      }
    });
    console.log(data);
    return expect(data.length).to.be(3);
  });
  return it('projection $', function() {
    var data;
    collection.insert({
      "_id": 1,
      "semester": 1,
      "grades": [70, 87, 90]
    });
    collection.insert({
      "_id": 2,
      "semester": 1,
      "grades": [90, 88, 92]
    });
    collection.insert({
      "_id": 3,
      "semester": 1,
      "grades": [85, 100, 90]
    });
    collection.insert({
      "_id": 4,
      "semester": 2,
      "grades": [79, 85, 80]
    });
    collection.insert({
      "_id": 5,
      "semester": 2,
      "grades": [88, 88, 92]
    });
    collection.insert({
      "_id": 6,
      "semester": 2,
      "grades": [95, 90, 96]
    });
    data = collection.find({
      criteria: {
        semester: 1,
        grades: {
          $gte: 85
        }
      },
      projection: {
        "grades.$": 1
      }
    });
    return console.log(data);
  });
});
