// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  "use strict";
  var Collection, LocalDB, Utils, db;
  LocalDB = require("localdb");
  Collection = require("core/collection");
  Utils = require("core/utils");
  db = new LocalDB("foo");
  return describe("Collection Promise", function() {
    it("InsertPromise", function() {
      var InsertPromise_bar;
      InsertPromise_bar = db.collection("InsertPromise");
      return InsertPromise_bar.drop().then(function() {
        return InsertPromise_bar.find();
      }).then(function(data) {
        return console.log("InsertPromise --->", data.length);
      }).then(function() {
        return InsertPromise_bar.insert({
          a: 1,
          b: "abc",
          c: /hell.*ld/,
          d: {
            e: 4,
            f: "5"
          },
          g: function(h) {
            return h * 3;
          },
          i: [1, 2, 3]
        });
      }).then(function() {
        return InsertPromise_bar.find();
      }).then(function(data) {
        console.log(data.length, data[0]);
        data = data[0];
        expect(data.a).toEqual(1);
        expect(data.b).toEqual("abc");
        expect(data.c.test("hello world")).toEqual(true);
        expect(data.d).toEqual({
          e: 4,
          f: "5"
        });
        expect(Utils.isFunction(data.g)).toEqual(true);
        expect(data.g(100)).toEqual(300);
        return expect(data.i).toEqual([1, 2, 3]);
      });
    });
    it("InsertListPromise", function() {
      var InsertListPromise_bar;
      InsertListPromise_bar = db.collection("InsertListPromise");
      return InsertListPromise_bar.drop().then(function() {
        return InsertListPromise_bar.insert([
          {
            a: 1,
            b: 2,
            c: 3
          }, {
            a: 2,
            b: 3,
            c: 4
          }
        ]);
      }).then(function() {
        return InsertListPromise_bar.find();
      }).then(function(data) {
        expect(data.length).toEqual(2);
        return InsertListPromise_bar.insert([
          {
            a: 1,
            b: 2,
            c: 3
          }, 4, {
            a: 2,
            b: 3,
            c: 4
          }
        ]);
      }).then(function() {
        return InsertListPromise_bar.find();
      }).then(function(data) {
        return expect(data.length).toEqual(4);
      });
    });
    it("UpdatePromise", function() {
      var UpdatePromise_bar;
      UpdatePromise_bar = db.collection("UpdatePromise");
      return UpdatePromise_bar.drop().then(function() {
        return UpdatePromise_bar.insert([
          {
            a: 1,
            b: 2
          }, {
            a: 1,
            b: 3
          }, {
            a: 2,
            b: 4
          }
        ]);
      }).then(function() {
        return UpdatePromise_bar.update({
          $set: {
            a: 3
          },
          $inc: {
            b: 2
          }
        });
      }).then(function() {
        return UpdatePromise_bar.findOne();
      }).then(function(data) {
        return expect(data.a).toEqual(3);
      });
    });
    it("RemovePromise", function() {
      var RemovePromise_bar;
      RemovePromise_bar = db.collection("RemovePromise");
      return RemovePromise_bar.drop().then(function() {
        return RemovePromise_bar.insert([
          {
            a: 1,
            b: 2
          }, {
            a: 1,
            b: 3
          }, {
            a: 2,
            b: 4
          }
        ]);
      }).then(function() {
        return RemovePromise_bar.remove();
      }).then(function() {
        return RemovePromise_bar.find();
      }).then(function(data) {
        return expect(data).toEqual([]);
      });
    });
    return it("FindOnePromise", function() {
      var FindOnePromise_bar;
      FindOnePromise_bar = db.collection("FindOnePromise");
      return FindOnePromise_bar.drop().then(function() {
        return FindOnePromise_bar.insert([
          {
            a: 1,
            b: 2,
            c: {
              d: 3,
              e: 4
            },
            f: function(x) {
              return x * x;
            },
            g: [1, 2, 3, 4],
            h: "abc",
            price: 10.99,
            max1: 100,
            max2: 200,
            min1: 50,
            min2: 30
          }, {
            a: 1,
            b: 2,
            c: {
              d: 3,
              e: 4
            },
            f: function(x) {
              return x * x;
            },
            g: [1, 2, 3, 4],
            h: "abc",
            price: 10.99,
            max1: 100,
            max2: 200,
            min1: 50,
            min2: 30
          }
        ]);
      }).then(function() {
        return FindOnePromise_bar.findOne({
          where: {
            a: 1
          }
        });
      }).then(function(data) {
        return expect(data.a).toEqual(1);
      });
    });
  });
});
