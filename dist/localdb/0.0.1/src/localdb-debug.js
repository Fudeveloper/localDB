define("localdb/0.0.1/src/localdb-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  'use strict';
  var Collection, LocalDB, Utils, dbPrefix;
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Collection = require("localdb/0.0.1/src/lib/collection-debug");
  dbPrefix = "ldb_";
  LocalDB = function(dbName, engine) {
    if (engine == null) {
      engine = localStorage;
    }
    this.ls = engine;
    this.name = dbPrefix + dbName;
    return this;
  };
  LocalDB.isSupport = function() {
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      return true;
    } else {
      return false;
    }
  };
  LocalDB.prototype.collections = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.ls.key(i).indexOf("" + this.name + "_") === 0) {
        _results.push(this.ls.key(i));
      }
    }
    return _results;
  };
  LocalDB.prototype.collection = function(collectionName) {
    return new Collection(collectionName, this);
  };
  LocalDB.prototype.drop = function(collectionName) {
    var i, j, keys, _i, _len;
    collectionName = collectionName != null ? "_" + collectionName : "";
    keys = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.ls.key(i).indexOf(this.name + collectionName) === 0) {
          _results.push(this.ls.key(i));
        }
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      j = keys[_i];
      this.ls.removeItem(j);
    }
    return true;
  };
  module.exports = LocalDB;
});
define("localdb/0.0.1/src/lib/utils-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  var Utils, _isType;
  Utils = {};
  _isType = function(type) {
    return function(obj) {
      return {}.toString.call(obj).toLowerCase() === ("[object " + type + "]").toLowerCase();
    };
  };
  Utils.isType = function(ele, type) {
    return _isType(type)(ele);
  };
  Utils.isObject = _isType("object");
  Utils.isString = _isType("string");
  Utils.isNumber = _isType("number");
  Utils.isArray = _isType("array");
  Utils.isFunction = _isType("function");
  Utils.isRegex = _isType("regexp");
  Utils.parse = function(str) {
    if ((str != null) && Utils.isString(str)) {
      return JSON.parse(str);
    } else {
      return [];
    }
  };
  Utils.stringify = function(obj) {
    if ((obj != null) && (Utils.isArray(obj) || Utils.isObject(obj))) {
      return JSON.stringify(obj);
    } else {
      return "[]";
    }
  };
  module.exports = Utils;
});
define("localdb/0.0.1/src/lib/collection-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  'use strict';
  var Collection, Criteria, Projection, Update, Utils;
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Criteria = require("localdb/0.0.1/src/lib/criteria-debug");
  Projection = require("localdb/0.0.1/src/lib/projection-debug");
  Update = require("localdb/0.0.1/src/lib/update-debug");
  Collection = function(collectionName, db) {
    this.name = "" + db.name + "_" + collectionName;
    this.ls = db.ls;
    this.deserialize();
  };
  Collection.prototype.deserialize = function() {
    return this.data = Utils.parse(this.ls.getItem(this.name));
  };
  Collection.prototype.serialize = function() {
    return this.ls.setItem(this.name, Utils.stringify(this.data));
  };
  Collection.prototype.drop = function() {
    return this.ls.removeItem(this.name);
  };
  Collection.prototype.insert = function(rowData) {
    this.deserialize();
    this.data.push(rowData);
    return this.serialize();
  };
  Collection.prototype.update = function(actions, options) {
    var criteria;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    this.deserialize();
    this.data = Update(this.data, actions, criteria);
    return this.serialize();
  };
  Collection.prototype.remove = function(options) {
    var criteria, d;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    this.deserialize();
    this.data = (function() {
      var _i, _len, _ref, _results;
      _ref = this.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        if (!Criteria.check(d, criteria)) {
          _results.push(d);
        }
      }
      return _results;
    }).call(this);
    return this.serialize();
  };
  Collection.prototype.find = function(options) {
    var criteria, d, limit, projection, result, _i, _len, _ref;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    projection = options.projection != null ? options.projection : {};
    limit = options.limit != null ? options.limit : -1;
    this.deserialize();
    result = [];
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(Criteria.check(d, criteria))) {
        continue;
      }
      if (limit === 0) {
        break;
      }
      limit = limit - 1;
      result.push(d);
    }
    return Projection.generate(result, projection);
  };
  Collection.prototype.findOne = function(options) {
    if (options == null) {
      options = {};
    }
    options.limit = 1;
    return this.find(options);
  };
  module.exports = Collection;
});
define("localdb/0.0.1/src/lib/criteria-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  'use strict';
  var Criteria, Utils, arrayCheck, cmpCheck, logicCheck, numberCheck, regexCheck, stringCheck,
    __indexOf = [].indexOf || function(item) {
      for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
      }
      return -1;
    };
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  numberCheck = function(obj, numberConditon) {
    if (Utils.isNumber(obj) && obj === numberConditon) {
      return true;
    }
    if (Utils.isArray(obj) && (__indexOf.call(obj, numberConditon) >= 0)) {
      return true;
    }
    return false;
  };
  stringCheck = function(obj, stringCondition) {
    if (Utils.isString(obj) && obj === stringCondition) {
      return true;
    }
    if (Utils.isArray(obj) && (__indexOf.call(obj, stringCondition) >= 0)) {
      return true;
    }
    return false;
  };
  regexCheck = function(obj, regexCondition) {
    var o, _i, _len;
    if (Utils.isString(obj) && regexCondition.test(obj)) {
      return true;
    }
    if (Utils.isArray(obj)) {
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        o = obj[_i];
        if (regexCondition.test(o)) {
          return true;
        }
      }
    }
    return false;
  };
  logicCheck = function(data, key, condition) {
    var c, k, v, _i, _j, _len, _len1;
    for (k in condition) {
      v = condition[k];
      if (k === "$not") {
        if (Criteria.check(data, new function() {
          return this[key] = v;
        })) {
          return false;
        } else {
          return true;
        }
      }
    }
    switch (key) {
      case "$and":
        for (_i = 0, _len = condition.length; _i < _len; _i++) {
          c = condition[_i];
          if (!Criteria.check(data, c)) {
            return false;
          }
        }
        break;
      case "$nor":
        for (_j = 0, _len1 = condition.length; _j < _len1; _j++) {
          c = condition[_j];
          if (Criteria.check(data, c)) {
            return false;
          }
        }
        break;
      case "$or":
        if (!(function() {
          var _k, _len2;
          for (_k = 0, _len2 = condition.length; _k < _len2; _k++) {
            c = condition[_k];
            if (Criteria.check(data, c)) {
              return true;
            }
          }
        })()) {
          return false;
        }
        break;
      default:
        return void 0;
    }
    return true;
  };
  arrayCheck = function(obj, arrayKey, arrayCondition) {
    var c, _i, _len;
    switch (arrayKey) {
      case "$all":
        if (!Utils.isArray(obj)) {
          return false;
        }
        for (_i = 0, _len = arrayCondition.length; _i < _len; _i++) {
          c = arrayCondition[_i];
          if (!(function() {
            var d, _j, _len1;
            for (_j = 0, _len1 = obj.length; _j < _len1; _j++) {
              d = obj[_j];
              if (Utils.isArray(c) ? arrayCheck(d, arrayKey, c) : d === c) {
                return true;
              }
            }
          })()) {
            return false;
          }
        }
        break;
      case "$elemMatch":
        if (!Utils.isArray(obj)) {
          return false;
        }
        if (!(function() {
          var d, _j, _len1;
          for (_j = 0, _len1 = obj.length; _j < _len1; _j++) {
            d = obj[_j];
            if (Criteria.check(d, arrayCondition)) {
              return true;
            }
          }
        })()) {
          return false;
        }
        break;
      case "$size":
        if (!Utils.isArray(obj)) {
          return false;
        }
        if (obj.length !== arrayCondition) {
          return false;
        }
        break;
      default:
        return void 0;
    }
    return true;
  };
  cmpCheck = function(obj, key, cmpCondition) {
    var c_key, c_v, c_value, flag, _i, _len, _ref;
    for (c_key in cmpCondition) {
      c_value = cmpCondition[c_key];
      switch (c_key) {
        case "$gt":
          if (obj[key] <= c_value) {
            return false;
          }
          break;
        case "$gte":
          if (obj[key] < c_value) {
            return false;
          }
          break;
        case "$lt":
          if (obj[key] >= c_value) {
            return false;
          }
          break;
        case "$lte":
          if (obj[key] > c_value) {
            return false;
          }
          break;
        case "$ne":
          if (obj[key] === c_value) {
            return false;
          }
          break;
        case "$in":
          flag = true;
          for (_i = 0, _len = c_value.length; _i < _len; _i++) {
            c_v = c_value[_i];
            if (Utils.isRegex(c_v) && c_v.test(obj[key])) {
              flag = false;
              break;
            } else if (obj[key] === c_v) {
              flag = false;
              break;
            }
          }
          if (flag) {
            return false;
          }
          break;
        case "$nin":
          if (_ref = obj[key], __indexOf.call(c_value, _ref) >= 0) {
            return false;
          }
          break;
        case "$exists":
          if (c_value !== (obj[key] != null)) {
            return false;
          }
          break;
        case "$type":
          if (!Utils.isType(obj[key], c_value)) {
            return false;
          }
          break;
        case "$mod":
          if (obj[key] % c_value[0] !== c_value[1]) {
            return false;
          }
          break;
        case "$regex":
          if (!(new RegExp(c_value)).test(obj[key])) {
            return false;
          }
          break;
        default:
          if (!Criteria.check(obj[key], JSON.parse("{\"" + c_key + "\": " + (JSON.stringify(c_value)) + "}"))) {
            return false;
          }
      }
    }
    return true;
  };
  Criteria = {};
  Criteria.check = function(data, criteria) {
    var arrayCheckResult, condition, key, logicCheckResult;
    for (key in criteria) {
      condition = criteria[key];
      /* Number Check
       *  criteria: {a: 1}
       *  data: [{a: 1, b: 2, c: 3}] or [{a:[1,2,3]}]
       */
      if (Utils.isNumber(condition) && key !== "$size") {
        if (numberCheck(data[key], condition)) {
          continue;
        } else {
          return false;
        }
      }
      /* String Check
       *  criteria: {a: "abc"}
       *  data: [{a: "abc", b: 2, c: 3}] or [{a: ["abc","bcd","edf"], b: 2, c: 3}]
       */
      if (Utils.isString(condition)) {
        if (stringCheck(data[key], condition)) {
          continue;
        } else {
          return false;
        }
      }
      /* Regex Check
       *  criteria: {a: /abc+/}
       *  data: [{a: "abcabc"}] or [{a: ["abcabc", "aaa", "bbb"]}]
       */
      if (Utils.isRegex(condition)) {
        if (regexCheck(data[key], condition)) {
          continue;
        } else {
          return false;
        }
      }
      /* Logic Check
       *  $and criteria: {$and: [{a: 1}, {b: 2}]}
       *  data: [{a:1, b:2, c:3}]
       *  $or criteria: {$or: [{a: 1}, {b: 2}]}
       *  data: [{a:1, b:3, c:4}] or [{a:2, b:2, c:3}]
       *  $nor criteria: {$nor: [{a: 1}, {b: 2}]}
       *  data: [{a:2, b:3, c:4}]
       *  TODO $not criteria: {a: {$not: {$gt: 10}}} //a is field
       *  data: [{a:5, b:3, c:4}]
       *  TO DISCUSS : Should we add feature to support {$not: {a: 10}} kind of criteria?
       */
      logicCheckResult = logicCheck(data, key, condition);
      if (logicCheckResult != null) {
        if (logicCheckResult) {
          continue;
        } else {
          return false;
        }
      }
      /* Array Check
       *  $all criteria: {a: [1,2,3]}
       *  data: [{a: [1,2,3,4,5], b: 1}] or [{a: [[1,2,3],[1,2,4]]}]
       */
      arrayCheckResult = arrayCheck(data, key, condition);
      if (arrayCheckResult != null) {
        if (arrayCheckResult) {
          continue;
        } else {
          return false;
        }
      }
      if (cmpCheck(data, key, condition)) {
        continue;
      } else {
        return false;
      }
    }
    return true;
  };
  module.exports = Criteria;
});
define("localdb/0.0.1/src/lib/projection-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  'use strict';
  var Criteria, Projection, Utils, generateItem;
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Criteria = require("localdb/0.0.1/src/lib/criteria-debug");
  Projection = {};
  Projection.generate = function(data, projection) {
    var d;
    if (JSON.stringify(projection) === "{}") {
      return data;
    }
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        _results.push(generateItem(d, projection));
      }
      return _results;
    })();
  };
  generateItem = function(item, projection) {
    var flag, i, key, r, result, v_key, v_value, value, _i, _len;
    result = {};
    for (key in projection) {
      value = projection[key];
      if (key.indexOf(".$") !== -1) {
        key = key.split(".")[0];
        if (!Utils.isArray(item[key]) || item[key].length === 0) {
          continue;
        }
        result[key] = [item[key][0]];
      } else if (key.indexOf("$elemMatch") === 0) {
        if (!Utils.isArray(item) || item.length === 0) {
          continue;
        }
        r = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          i = item[_i];
          flag = true;
          for (v_key in value) {
            v_value = value[v_key];
            if (Utils.isObject(v_value)) {
              console.log("TODO");
            } else {
              if (i[v_key] !== v_value) {
                flag = false;
              }
            }
          }
          if (flag) {
            r.push(i);
          }
        }
        return r;
      } else if (Utils.isObject(value)) {
        result[key] = generateItem(item[key], value);
      } else {
        if (value === 1) {
          result[key] = item[key];
        }
      }
    }
    return result;
  };
  module.exports = Projection;
});
define("localdb/0.0.1/src/lib/update-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  'use strict';
  var Criteria, Update, Utils, generate;
  Criteria = require("localdb/0.0.1/src/lib/criteria-debug");
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  generate = function(data, action, value, criteria) {
    var d, k, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
    switch (action) {
      case "$inc":
        for (k in value) {
          v = value[k];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            d = data[_i];
            if (Criteria.check(d, criteria) && Utils.isNumber(d[k])) {
              d[k] = d[k] + v;
            }
          }
        }
        break;
      case "$set":
        for (k in value) {
          v = value[k];
          for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
            d = data[_j];
            if (Criteria.check(d, criteria) && (d[k] != null)) {
              d[k] = v;
            }
          }
        }
        break;
      case "$mul":
        for (k in value) {
          v = value[k];
          for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
            d = data[_k];
            if (Criteria.check(d, criteria) && Utils.isNumber(d[k])) {
              d[k] = d[k] * v;
            }
          }
        }
        break;
      case "$rename":
        for (k in value) {
          v = value[k];
          for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
            d = data[_l];
            if (!(Criteria.check(d, criteria) && (d[k] != null))) {
              continue;
            }
            d[v] = d[k];
            delete d[k];
          }
        }
        break;
      case "$unset":
        for (k in value) {
          for (_m = 0, _len4 = data.length; _m < _len4; _m++) {
            d = data[_m];
            if (Criteria.check(d, criteria) && (d[k] != null)) {
              delete d[k];
            }
          }
        }
        break;
      case "$min":
        for (k in value) {
          v = value[k];
          for (_n = 0, _len5 = data.length; _n < _len5; _n++) {
            d = data[_n];
            if (Criteria.check(d, criteria) && Utils.isNumber(d[k])) {
              d[k] = Math.min(d[k], v);
            }
          }
        }
        break;
      case "$max":
        for (k in value) {
          v = value[k];
          for (_o = 0, _len6 = data.length; _o < _len6; _o++) {
            d = data[_o];
            if (Criteria.check(d, criteria) && Utils.isNumber(d[k])) {
              d[k] = Math.max(d[k], v);
            }
          }
        }
        break;
      default:
        for (_p = 0, _len7 = data.length; _p < _len7; _p++) {
          d = data[_p];
          if (Criteria.check(d, criteria) && (d[action] != null)) {
            d[action] = value;
          }
        }
    }
    return data;
  };
  Update = function(data, actions, criteria) {
    var action, value;
    for (action in actions) {
      value = actions[action];
      data = generate(data, action, value, criteria);
    }
    return data;
  };
  module.exports = Update;
});