define("localdb/0.0.1/src/localdb-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  var Collection, LocalDB, Utils, dbPrefix;
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Collection = require("localdb/0.0.1/src/lib/collection-debug");
  dbPrefix = "ldb_";
  LocalDB = function(dbName, engine) {
    if (engine == null) {
      engine = localStorage;
    }
    this.ls = engine;
    this.name = dbPrefix + dbName;
    return this;
  };
  LocalDB.isSupport = function() {
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      return true;
    } else {
      return false;
    }
  };
  LocalDB.prototype.collections = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.ls.key(i).indexOf("" + this.name + "_") === 0) {
        _results.push(this.ls.key(i));
      }
    }
    return _results;
  };
  LocalDB.prototype.collection = function(collectionName) {
    return new Collection(collectionName, this);
  };
  LocalDB.prototype.drop = function(collectionName) {
    var i, j, keys, _i, _len;
    collectionName = collectionName != null ? "_" + collectionName : "";
    keys = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.ls.key(i).indexOf(this.name + collectionName) === 0) {
          _results.push(this.ls.key(i));
        }
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      j = keys[_i];
      this.ls.removeItem(j);
    }
    return true;
  };
  module.exports = LocalDB;
});
define("localdb/0.0.1/src/lib/utils-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  var Utils, _isType;
  Utils = {};
  _isType = function(type) {
    return function(obj) {
      return {}.toString.call(obj).toLowerCase() === ("[object " + type + "]").toLowerCase();
    };
  };
  Utils.isType = function(ele, type) {
    return _isType(type)(ele);
  };
  Utils.isObject = _isType("object");
  Utils.isString = _isType("string");
  Utils.isArray = _isType("array");
  Utils.isFunction = _isType("function");
  Utils.isNumber = _isType("number");
  Utils.isRegex = _isType("regexp");
  Utils.parse = function(str) {
    if ((str != null) && Utils.isString(str)) {
      return JSON.parse(str);
    } else {
      return [];
    }
  };
  Utils.stringify = function(obj) {
    if ((obj != null) && Utils.isArray(obj)) {
      return JSON.stringify(obj);
    } else {
      return "[]";
    }
  };
  module.exports = Utils;
});
define("localdb/0.0.1/src/lib/collection-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  var Collection, Criteria, Utils;
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Criteria = require("localdb/0.0.1/src/lib/criteria-debug");
  Collection = function(collectionName, db) {
    this.name = "" + db.name + "_" + collectionName;
    this.ls = db.ls;
    this.deserialize();
  };
  Collection.prototype.deserialize = function() {
    return this.data = Utils.parse(this.ls.getItem(this.name));
  };
  Collection.prototype.serialize = function() {
    return this.ls.setItem(this.name, Utils.stringify(this.data));
  };
  Collection.prototype.drop = function() {
    return this.ls.removeItem(this.name);
  };
  Collection.prototype.insert = function(rowData) {
    this.deserialize();
    this.data.push(rowData);
    return this.serialize();
  };
  Collection.prototype.update = function(action, options) {
    var actions, criteria, d, key, value, _i, _len, _ref;
    criteria = options.criteria != null ? options.criteria : {};
    this.deserialize();
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(Criteria.check(d, criteria))) {
        continue;
      }
      actions = action.$set;
      for (key in actions) {
        value = actions[key];
        d[key] = value;
      }
    }
    return this.serialize();
  };
  Collection.prototype.remove = function(options) {
    var criteria, d;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    this.deserialize();
    this.data = (function() {
      var _i, _len, _ref, _results;
      _ref = this.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        if (!Criteria.check(d, criteria)) {
          _results.push(d);
        }
      }
      return _results;
    }).call(this);
    return this.serialize();
  };
  Collection.prototype.find = function(options) {
    var criteria, d, key, limit, p, pResult, projection, result, value, _i, _j, _len, _len1, _ref;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    projection = options.projection != null ? options.projection : {};
    limit = options.limit != null ? options.limit : -1;
    this.deserialize();
    result = [];
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(Criteria.check(d, criteria))) {
        continue;
      }
      if (limit === 0) {
        break;
      }
      limit = limit - 1;
      result.push(d);
    }
    if (JSON.stringify(projection) === "{}") {
      return result;
    }
    pResult = [];
    for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
      d = result[_j];
      p = {};
      for (key in projection) {
        value = projection[key];
        if (value === 1) {
          p[key] = d[key];
        }
      }
      pResult.push(p);
    }
    return pResult;
  };
  Collection.prototype.findOne = function(options) {
    if (options == null) {
      options = {};
    }
    options.limit = 1;
    return this.find(options);
  };
  module.exports = Collection;
});
define("localdb/0.0.1/src/lib/criteria-debug", [], function(require, exports, module) {
  // Generated by CoffeeScript 1.7.1
  var Criteria, Utils,
    __indexOf = [].indexOf || function(item) {
      for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
      }
      return -1;
    };
  Utils = require("localdb/0.0.1/src/lib/utils-debug");
  Criteria = {};
  Criteria.check = function(obj, criteria) {
    var c, c_key, c_value, condition, f, flag, key, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    for (key in criteria) {
      condition = criteria[key];
      if (Utils.isString(condition) || Utils.isNumber(condition)) {
        if ((obj[key] != null) && obj[key] === condition) {
          continue;
        } else {
          return false;
        }
      }
      if (Utils.isRegex(condition)) {
        if (condition.test(obj[key])) {
          continue;
        } else {
          return false;
        }
      }
      flag = true;
      switch (key) {
        case "$and":
          for (_i = 0, _len = condition.length; _i < _len; _i++) {
            c = condition[_i];
            if (!Criteria.check(obj, c)) {
              return false;
            }
          }
          break;
        case "$not":
          if (Criteria.check(obj, condition)) {
            return false;
          }
          break;
        case "$nor":
          for (_j = 0, _len1 = condition.length; _j < _len1; _j++) {
            c = condition[_j];
            if (Criteria.check(obj, c)) {
              return false;
            }
          }
          break;
        case "$or":
          f = false;
          for (_k = 0, _len2 = condition.length; _k < _len2; _k++) {
            c = condition[_k];
            if (!(Criteria.check(obj, c))) {
              continue;
            }
            f = true;
            break;
          }
          if (!f) {
            return false;
          }
          break;
        default:
          flag = false;
      }
      if (flag) {
        continue;
      }
      for (c_key in condition) {
        c_value = condition[c_key];
        switch (c_key) {
          case "$gt":
            if (obj[key] <= c_value) {
              return false;
            }
            break;
          case "$gte":
            if (obj[key] < c_value) {
              return false;
            }
            break;
          case "$lt":
            if (obj[key] >= c_value) {
              return false;
            }
            break;
          case "$lte":
            if (obj[key] > c_value) {
              return false;
            }
            break;
          case "$ne":
            if (obj[key] === c_value) {
              return false;
            }
            break;
          case "$in":
            if (_ref = obj[key], __indexOf.call(c_value, _ref) < 0) {
              return false;
            }
            break;
          case "$nin":
            if (_ref1 = obj[key], __indexOf.call(c_value, _ref1) >= 0) {
              return false;
            }
            break;
          case "$exist":
            if (c_value !== (obj[key] != null)) {
              return false;
            }
            break;
          case "$type":
            if (!Utils.isType(obj[key], c_value)) {
              return false;
            }
            break;
          case "$mod":
            if (obj[key] % c_value[0] !== c_value[1]) {
              return false;
            }
            break;
          case "$regex":
            if (!(new RegExp(c_value)).test(obj[key])) {
              return false;
            }
            break;
          default:
            if (!Criteria.check(obj[key], JSON.parse("{\"" + c_key + "\": " + (JSON.stringify(c_value)) + "}"))) {
              return false;
            }
        }
      }
    }
    return true;
  };
  module.exports = Criteria;
});