/*! localDB - v0.1.1 - 2014-09-02
* localdb.emptystack.net
* Copyright (c) 2014 Eric Wang; Licensed MIT */
// Generated by CoffeeScript 1.7.1

/*
 * localDB
 * localDB.emptystack.net
 *
 * Copyright (c) 2014 Eric Wang
 * Licensed under the MIT license.
 */
define(function(require, exports, module) {
  'use strict';
  var Collection, LocalDB, criteriaCheck, dbPrefix, isArray, isFunction, isNumber, isObject, isString, isType, parse, stringify, _isType;
  dbPrefix = "ldb_";
  _isType = function(type) {
    return function(obj) {
      return {}.toString.call(obj) === ("[object " + (type.toLowerCase().replace(/\w/, function(w) {
        return w.toUpperCase();
      })) + "]");
    };
  };
  isType = function(ele, type) {
    return _isType(type)(ele);
  };
  isObject = _isType("object");
  isString = _isType("string");
  isArray = _isType("array");
  isFunction = _isType("function");
  isNumber = _isType("number");
  parse = function(str) {
    if ((str != null) && isString(str)) {
      return JSON.parse(str);
    } else {
      return [];
    }
  };
  stringify = function(obj) {
    if ((obj != null) && isArray(obj)) {
      return JSON.stringify(obj);
    } else {
      return "[]";
    }
  };
  criteriaCheck = function(obj, criteria) {
    var c_key, c_value, condition, key;
    for (key in criteria) {
      condition = criteria[key];
      if (obj[key] == null) {
        return false;
      }
      if (isObject(condition)) {
        for (c_key in condition) {
          c_value = condition[c_key];
          switch (c_key) {
            case "$gt":
              if (obj[key] <= c_value) {
                return false;
              }
              break;
            case "$gte":
              if (obj[key] < c_value) {
                return false;
              }
              break;
            case "$lt":
              if (obj[key] >= c_value) {
                return false;
              }
              break;
            case "$lte":
              if (obj[key] > c_value) {
                return false;
              }
              break;
            case "$ne":
              if (obj[key] === c_value) {
                return false;
              }
              break;
            default:
              if (!criteriaCheck(obj[key], JSON.parse("{\"" + c_key + "\": " + (JSON.stringify(c_value)) + "}"))) {
                return false;
              }
          }
        }
      } else {
        if (obj[key] !== condition) {
          return false;
        }
      }
    }
    return true;
  };
  LocalDB = function(dbName, engine) {
    if (engine == null) {
      engine = localStorage;
    }
    this.ls = engine;
    this.name = dbPrefix + dbName;
  };
  LocalDB.isSupport = function() {
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      return true;
    } else {
      return false;
    }
  };
  LocalDB.prototype.collections = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.ls.key(i).indexOf("" + this.name + "_") === 0) {
        _results.push(this.ls.key(i));
      }
    }
    return _results;
  };
  LocalDB.prototype.drop = function(collectionName) {
    var i, j, keys, _i, _len;
    collectionName = collectionName != null ? "_" + collectionName : "";
    keys = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.ls.key(i).indexOf(this.name + collectionName) === 0) {
          _results.push(this.ls.key(i));
        }
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      j = keys[_i];
      this.ls.removeItem(j);
    }
  };
  LocalDB.prototype.collection = function(collectionName) {
    return new Collection(collectionName, this);
  };
  Collection = function(collectionName, db) {
    this.name = "" + db.name + "_" + collectionName;
    this.ls = db.ls;
    this.deserialize();
  };
  Collection.prototype.deserialize = function() {
    return this.data = parse(this.ls.getItem(this.name));
  };
  Collection.prototype.serialize = function() {
    return this.ls.setItem(this.name, stringify(this.data));
  };
  Collection.prototype.drop = function() {
    return this.ls.removeItem(this.name);
  };
  Collection.prototype.insert = function(rowData) {
    this.deserialize();
    this.data.push(rowData);
    return this.serialize();
  };
  Collection.prototype.update = function(action, options) {
    var actions, criteria, d, key, value, _i, _len, _ref;
    criteria = options.criteria != null ? options.criteria : {};
    this.deserialize();
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(criteriaCheck(d, criteria))) {
        continue;
      }
      actions = action.$set;
      for (key in actions) {
        value = actions[key];
        d[key] = value;
      }
    }
    return this.serialize();
  };
  Collection.prototype.remove = function(options) {
    var criteria, d;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    this.data = (function() {
      var _i, _len, _ref, _results;
      _ref = this.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        if (!criteriaCheck(d, criteria)) {
          _results.push(d);
        }
      }
      return _results;
    }).call(this);
    return this.serialize();
  };
  Collection.prototype.find = function(options) {
    var criteria, d, key, limit, limt, p, pResult, projection, result, value, _i, _j, _len, _len1, _ref;
    if (options == null) {
      options = {};
    }
    criteria = options.criteria != null ? options.criteria : {};
    projection = options.projection != null ? options.projection : {};
    limit = options.limit != null ? options.limit : -1;
    this.deserialize();
    console.log(this.data);
    result = [];
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      if (!(criteriaCheck(d, criteria))) {
        continue;
      }
      if (limit === 0) {
        break;
      }
      limt = limit - 1;
      result.push(d);
    }
    if (JSON.stringify(projection) === "{}") {
      return result;
    }
    pResult = [];
    for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
      d = result[_j];
      p = {};
      for (key in projection) {
        value = projection[key];
        if (value === 1) {
          p[key] = d[key];
        }
      }
      pResult.push(p);
    }
    return pResult;
  };
  Collection.prototype.findOne = function(options) {
    if (options == null) {
      options = {};
    }
    options.limit = 1;
    return this.find(options);
  };
  return module.exports = LocalDB;
});
