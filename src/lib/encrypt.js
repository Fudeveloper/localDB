// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  "use strict";
  var Encrypt, Sha1, Utils;
  Utils = require("core/utils");
  Sha1 = require("lib/sha1");
  Encrypt = {};

  /*
    * 加密
   */
  Encrypt.encode = function(value, key) {
    var comEncodeVal, encodeVal, index, len, mod, resultArr, resultStr, uniKey, uniKeyArr, uniValue, uniValueArr, unicodeKey, unicodeValue, _i, _len;
    if (value == null) {
      return null;
    }
    resultArr = [""];
    key = Sha1.hex_sha1(key);
    unicodeValue = Utils.toUnicode(value);
    unicodeKey = Utils.toUnicode(key);
    uniValueArr = unicodeValue.split('\\u').slice(1);
    uniKeyArr = unicodeKey.split('\\u').slice(1);
    len = uniKeyArr.length;
    for (index = _i = 0, _len = uniValueArr.length; _i < _len; index = ++_i) {
      uniValue = uniValueArr[index];
      mod = index % len;
      uniKey = uniKeyArr[mod];
      encodeVal = parseInt(uniValue, 16) + parseInt(uniKey, 16);
      if (encodeVal > 65536) {
        encodeVal = encodeVal - 65536;
      }
      comEncodeVal = ('00' + encodeVal.toString(16)).slice(-4);
      resultArr.push(comEncodeVal);
    }
    resultStr = resultArr.join('\\u');
    return Utils.fromUnicode(resultStr);
  };

  /*
    * 解密
   */
  Encrypt.decode = function(value, key) {
    var comEncodeVal, encodeVal, index, len, mod, resultArr, resultStr, uniKey, uniKeyArr, uniValue, uniValueArr, unicodeKey, unicodeValue, _i, _len;
    if (value === null) {
      return null;
    }
    resultArr = [""];
    key = Sha1.hex_sha1(key);
    unicodeValue = Utils.toUnicode(value);
    unicodeKey = Utils.toUnicode(key);
    uniValueArr = unicodeValue.split("\\u").slice(1);
    uniKeyArr = unicodeKey.split("\\u").slice(1);
    len = uniKeyArr.length;
    for (index = _i = 0, _len = uniValueArr.length; _i < _len; index = ++_i) {
      uniValue = uniValueArr[index];
      mod = index % len;
      uniKey = uniKeyArr[mod];
      encodeVal = parseInt(uniValue, 16) - parseInt(uniKey, 16);
      if (encodeVal < 0) {
        encodeVal = 65536 + encodeVal;
      }
      comEncodeVal = ("00" + encodeVal.toString(16)).slice(-4);
      resultArr.push(comEncodeVal);
    }
    resultStr = resultArr.join("\\u");
    return Utils.fromUnicode(resultStr);
  };
  return module.exports = Encrypt;
});
