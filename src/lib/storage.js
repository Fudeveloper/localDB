// Generated by CoffeeScript 1.7.1
define(function(require, exports, module) {
  'use strict';
  var Storage, Support, UserData, Utils, err;
  Support = require('lib/support');
  UserData = require('lib/userdata');
  Utils = require('lib/utils');
  err = null;
  Storage = (function() {
    function Storage(session) {
      this.session = session;
      if (this.session) {
        if (!Support.sessionstorage()) {
          throw new Error("sessionStorage is not supported!");
        }
      } else if (!Support.localstorage()) {
        if (!Support.userdata()) {
          throw new Error("no browser storage engine is supported in your browser!");
        }
        this.userdata = new UserData();
      }
    }

    Storage.prototype.key = function(index, callback) {
      var key;
      key = (this.session ? sessionStorage : (this.userdata != null ? this.userdata : localStorage)).key(index);
      if (typeof callback === 'function') {
        callback(key, err);
      } else {
        return key;
      }
    };

    Storage.prototype.size = function(callback) {
      var size;
      if (this.session) {
        size = sessionStorage.length;
      } else if (Support.localstorage()) {
        size = localStorage.length;
      } else {
        size = this.userdata.size();
      }
      if (typeof callback === 'function') {
        callback(size, err);
      } else {
        return size;
      }
    };

    Storage.prototype.setItem = function(key, val, callback) {
      var data, e, flag, ls;
      ls = (this.session ? sessionStorage : (this.userdata != null ? this.userdata : localStorage));
      try {
        ls.setItem(key, val);
      } catch (_error) {
        e = _error;
        flag = true;
        data = Utils.parse(val);
        while (flag) {
          try {
            data.splice(0, 1);
            ls.setItem(key, Utils.stringify(data));
            flag = false;
          } catch (_error) {}
        }
      }
      if (typeof callback === 'function') {
        callback(err);
      } else {

      }
    };

    Storage.prototype.getItem = function(key, callback) {
      var item;
      item = (this.session ? sessionStorage : (this.userdata != null ? this.userdata : localStorage)).getItem(key);
      if (typeof callback === 'function') {
        callback(item, err);
      } else {

      }
    };

    Storage.prototype.removeItem = function(key, callback) {
      (this.session ? sessionStorage : (this.userdata != null ? this.userdata : localStorage)).removeItem(key);
      if (typeof callback === 'function') {
        callback(err);
      } else {

      }
    };

    Storage.prototype.usage = function(callback) {

      /*
       *  check it out: http://stackoverflow.com/questions/4391575/how-to-find-the-size-of-localstorage
       */
      var allStrings, key, u, val;
      allStrings = "";
      if (this.tyep === 1) {
        for (key in sessionStorage) {
          val = sessionStorage[key];
          allStrings += val;
        }
      } else if (Support.localstorage()) {
        for (key in localStorage) {
          val = localStorage[key];
          allStrings += val;
        }
      } else {
        console.log("todo");
      }
      u = allStrings.length / 512;
      if (typeof callback === 'function') {
        callback(u, err);
      } else {

      }
    };

    return Storage;

  })();
  return module.exports = Storage;
});
