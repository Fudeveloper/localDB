// Generated by CoffeeScript 1.7.1
'use strict';
var Update, Utils, Where, generate;

Where = require('./where');

Utils = require('./utils');

generate = function(data, action, value, where) {
  var d, k, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p;
  switch (action) {
    case "$inc":
      for (k in value) {
        v = value[k];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          d = data[_i];
          if (Where(d, where) && Utils.isNumber(d[k])) {
            d[k] = d[k] + v;
          }
        }
      }
      break;
    case "$set":
      for (k in value) {
        v = value[k];
        for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
          d = data[_j];
          if (Where(d, where) && (d[k] != null)) {
            d[k] = v;
          }
        }
      }
      break;
    case "$mul":
      for (k in value) {
        v = value[k];
        for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
          d = data[_k];
          if (Where(d, where) && Utils.isNumber(d[k])) {
            d[k] = d[k] * v;
          }
        }
      }
      break;
    case "$rename":
      for (k in value) {
        v = value[k];
        for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
          d = data[_l];
          if (!(Where(d, where) && (d[k] != null))) {
            continue;
          }
          d[v] = d[k];
          delete d[k];
        }
      }
      break;
    case "$unset":
      for (k in value) {
        for (_m = 0, _len4 = data.length; _m < _len4; _m++) {
          d = data[_m];
          if (Where(d, where) && (d[k] != null)) {
            delete d[k];
          }
        }
      }
      break;
    case "$min":
      for (k in value) {
        v = value[k];
        for (_n = 0, _len5 = data.length; _n < _len5; _n++) {
          d = data[_n];
          if (Where(d, where) && Utils.isNumber(d[k])) {
            d[k] = Math.min(d[k], v);
          }
        }
      }
      break;
    case "$max":
      for (k in value) {
        v = value[k];
        for (_o = 0, _len6 = data.length; _o < _len6; _o++) {
          d = data[_o];
          if (Where(d, where) && Utils.isNumber(d[k])) {
            d[k] = Math.max(d[k], v);
          }
        }
      }
      break;
    default:
      for (_p = 0, _len7 = data.length; _p < _len7; _p++) {
        d = data[_p];
        if (Where(d, where) && (d[action] != null)) {
          d[action] = value;
        }
      }
  }
  return data;
};

Update = function(data, actions, where) {
  var action, value;
  for (action in actions) {
    value = actions[action];
    data = generate(data, action, value, where);
  }
  return data;
};

module.exports = Update;
