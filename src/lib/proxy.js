// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  'use strict';
  var Proxy, sendMessage;
  sendMessage = require("lib/send-message");
  Proxy = (function() {
    function Proxy(config, session) {
      var self;
      this.config = config;
      this.session = session;
      self = this;
      this.sendMessage = sendMessage;
      window.addEventListener('message', function(e) {
        var data, eve, result, type;
        result = JSON.parse(e.data);
        type = result.type;
        eve = result.eve;
        data = result.data;
        switch (type) {
          case "key":
            if (typeof self.key[eve] === "function") {
              self.key[eve](data);
              return delete self.key[eve];
            }
            break;
          case "size":
            if (typeof self.size[eve] === "function") {
              self.size[eve](data);
              return delete self.size[eve];
            }
            break;
          case "setItem":
            if (typeof self.setItem[eve] === "function") {
              self.setItem[eve](data);
              return delete self.setItem[eve];
            }
            break;
          case "getItem":
            if (typeof self.getItem[eve] === "function") {
              self.getItem[eve](data);
              return delete self.getItem[eve];
            }
            break;
          case "removeItem":
            if (typeof self.removeItem[eve] === "function") {
              self.removeItem[eve](data);
              return delete self.removeItem[eve];
            }
            break;
          case "usage":
            if (typeof self.usage[eve] === "function") {
              self.usage[eve](data);
              return delete self.usage[eve];
            }
        }
      }, false);
    }

    Proxy.prototype.key = function(index, fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "key" + id;
      data = {
        type: "key",
        index: index,
        eve: eve,
        session: this.session
      };
      this.key[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    Proxy.prototype.size = function(fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "size" + id;
      data = {
        type: "size",
        eve: eve,
        session: this.session
      };
      this.size[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    Proxy.prototype.setItem = function(key, val, fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "setItem" + id;
      data = {
        type: "setItem",
        key: key,
        val: val,
        eve: eve,
        session: this.session
      };
      this.setItem[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    Proxy.prototype.getItem = function(key, fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "getItem" + id;
      data = {
        type: "getItem",
        key: key,
        eve: eve,
        session: this.session
      };
      this.getItem[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    Proxy.prototype.removeItem = function(key, fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "removeItem" + id;
      data = {
        type: "removeItem",
        key: key,
        eve: eve,
        session: this.session
      };
      this.removeItem[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    Proxy.prototype.usage = function(fn) {
      var data, eve, id;
      id = new Date().getTime();
      eve = "usage" + id;
      data = {
        type: "removeItem",
        eve: eve,
        session: this.session
      };
      this.usage[eve] = fn;
      return this.sendMessage(JSON.stringify(data));
    };

    return Proxy;

  })();
  return module.exports = Proxy;
});
