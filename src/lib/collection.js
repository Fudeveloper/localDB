// Generated by CoffeeScript 1.7.1
var __slice = [].slice;

define(function(require, exports, module) {
  'use strict';
  var Collection, Operation, Utils;
  Utils = require('lib/utils');
  Operation = require('lib/operation');
  Collection = (function() {

    /*
     *  in LocalDB, only use LocalDB to get a collection.
     *  db = new LocalDB('foo')
     *  var collection = db.collection('bar')
     */
    function Collection(collectionName, db) {
      if (collectionName === void 0) {
        throw new Error("collectionName should be specified.");
      }
      this.name = "" + db.name + "_" + collectionName;
      this.ls = db.ls;
    }


    /*
     *  get data and tranfer into object from localStorage/sessionStorage
     */

    Collection.prototype.deserialize = function(callback) {
      var self;
      self = this;
      return this.ls.getItem(this.name, function(data, err) {
        data = Utils.parse(data);
        if (callback != null) {
          return callback(data, err);
        }
      });
    };


    /*
     *  save data into localStorage/sessionStorage
     *  when catching error in setItem(), delete the oldest data and try again.
     */

    Collection.prototype.serialize = function(data, callback) {
      return this.ls.setItem(this.name, Utils.stringify(data), function(err) {
        if (callback != null) {
          return callback(err);
        }
      });
    };


    /*
     *  delete this collection
     */

    Collection.prototype.drop = function(callback) {
      return this.ls.removeItem(this.name, callback);
    };


    /*
     *  insert data into collection
     */

    Collection.prototype.insert = function() {
      var callback, options, paras, rowData, self, _ref;
      rowData = arguments[0], paras = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = Utils.parseParas(paras), options = _ref[0], callback = _ref[1];
      self = this;
      return this.deserialize(function(data, err) {
        if (err) {
          if (callback != null) {
            return callback(err);
          }
        } else {
          data = Operation.insert(data, rowData, options);
          return self.serialize(data, function(err) {
            if (callback != null) {
              return callback(err);
            }
          });
        }
      });
    };


    /*
     *  update collection
     */

    Collection.prototype.update = function() {
      var actions, callback, options, paras, self, _ref;
      actions = arguments[0], paras = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = Utils.parseParas(paras), options = _ref[0], callback = _ref[1];
      self = this;
      return this.deserialize(function(data, err) {
        if (err) {
          if (callback != null) {
            return callback(err);
          }
        } else {
          data = Operation.update(data, actions, options);
          return self.serialize(data, function(err) {
            if (callback != null) {
              return callback(err);
            }
          });
        }
      });
    };


    /*
     *  remove data from collection
     */

    Collection.prototype.remove = function() {
      var callback, options, paras, self, _ref;
      paras = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = Utils.parseParas(paras), options = _ref[0], callback = _ref[1];
      self = this;
      return this.deserialize(function(data, err) {
        if (err) {
          if (callback != null) {
            return callback(err);
          }
        } else {
          data = Operation.remove(data, options);
          return self.serialize(data, function(err) {
            if (callback != null) {
              return callback(err);
            }
          });
        }
      });
    };


    /*
     * find data from collection
     */

    Collection.prototype.find = function() {
      var callback, options, paras, self, _ref;
      paras = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = Utils.parseParas(paras), options = _ref[0], callback = _ref[1];
      self = this;
      return this.deserialize(function(data, err) {
        if (err) {
          if (callback != null) {
            return callback([], err);
          }
        } else {
          data = Operation.find(data, options);
          if (callback != null) {
            return callback(data, err);
          }
        }
      });
    };


    /*
     *  find data and only return one data from collection
     */

    Collection.prototype.findOne = function() {
      var callback, options, paras, self, _ref;
      paras = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = Utils.parseParas(paras), options = _ref[0], callback = _ref[1];
      options.limit = 1;
      self = this;
      return this.deserialize(function(data, err) {
        if (err) {
          if (callback != null) {
            return callback([], err);
          }
        } else {
          data = Operation.find(data, options);
          if (callback != null) {
            return callback((data.length === 0 ? void 0 : data[0]), err);
          }
        }
      });
    };

    return Collection;

  })();
  return module.exports = Collection;
});
