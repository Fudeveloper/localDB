// Generated by CoffeeScript 1.7.1
'use strict';
var Collection, Find, Insert, Remove, Update, Utils;

Utils = require('./utils');

Update = require('./update');

Remove = require('./remove');

Insert = require('./insert');

Find = require('./find');

Collection = (function() {

  /*
   *  in LocalDB, only use LocalDB to get a collection.
   *  db = new LocalDB('foo')
   *  var collection = db.collection('bar')
   */
  function Collection(collectionName, db) {
    this.name = "" + db.name + "_" + collectionName;
    this.ls = db.ls;
    this.deserialize();
  }


  /*
   *  get data and tranfer into object from localStorage/sessionStorage
   */

  Collection.prototype.deserialize = function() {
    return this.data = Utils.parse(this.ls.getItem(this.name));
  };


  /*
   *  save data into localStorage/sessionStorage
   */

  Collection.prototype.serialize = function() {
    return this.ls.setItem(this.name, Utils.stringify(this.data));
  };


  /*
   *  delete this collection
   */

  Collection.prototype.drop = function() {
    this.ls.removeItem(this.name);
    return true;
  };


  /*
   *  insert data into collection
   */

  Collection.prototype.insert = function(rowData, options) {
    if (options == null) {
      options = {};
    }
    this.deserialize();
    this.data = Insert(this.data, rowData, options);
    return this.serialize();
  };


  /*
   *  update collection
   */

  Collection.prototype.update = function(actions, options) {
    if (options == null) {
      options = {};
    }
    this.deserialize();
    this.data = Update(this.data, actions, options);
    return this.serialize();
  };


  /*
   *  remove data from collection
   */

  Collection.prototype.remove = function(options) {
    if (options == null) {
      options = {};
    }
    this.deserialize();
    this.data = Remove(this.data, options);
    return this.serialize();
  };


  /*
   * find data from collection
   */

  Collection.prototype.find = function(options) {
    if (options == null) {
      options = {};
    }
    this.deserialize();
    return Find(this.data, options);
  };


  /*
   *  find data and only return one data from collection
   */

  Collection.prototype.findOne = function(options) {
    if (options == null) {
      options = {};
    }
    options.limit = 1;
    return Find(this.data, options);
  };

  return Collection;

})();

module.exports = Collection;
