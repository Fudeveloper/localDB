// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  'use strict';
  var Server, Storage, sendMessage;
  sendMessage = require("lib/send-message");
  Storage = require('lib/storage');
  Server = (function() {
    function Server(config) {
      var self;
      this.config = config;
      self = this;
      window.addEventListener('message', function(e) {
        var index, isWhite, key, mes, origin, result, session, val;
        origin = e.origin;
        isWhite = self.checkOrigin(origin);
        if (isWhite === true) {
          result = JSON.parse(e.data);
          mes = {};
          mes.type = result.type;
          mes.eve = result.eve;
          session = result.session;
          switch (mes.type) {
            case "key":
              self.Storage = new Storage(session);
              index = result.index;
              return self.Storage.key(index, function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
            case "size":
              self.Storage = new Storage(session);
              return self.Storage.size(function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
            case "setItem":
              self.Storage = new Storage(session);
              key = result.key;
              val = result.val;
              return self.Storage.setItem(key, val, function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
            case "getItem":
              self.Storage = new Storage(session);
              key = result.key;
              return self.Storage.getItem(key, function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
            case "removeItem":
              self.Storage = new Storage(session);
              key = result.key;
              return self.Storage.removeItem(key, function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
            case "usage":
              self.Storage = new Storage(session);
              return self.Storage.usage(function(data) {
                mes.data = data;
                return self.postParent(mes, origin);
              });
          }
        } else {
          return false;
        }
      }, false);
    }

    Server.prototype.postParent = function(mes) {
      mes = JSON.stringify(mes);
      return parent.window.postMessage(mes, origin);
    };

    Server.prototype.checkOrigin = function(origin) {
      var isWhite, src, whiteList, _i, _len;
      isWhite = false;
      whiteList = self.config.whiteList;
      for (_i = 0, _len = whiteList.length; _i < _len; _i++) {
        src = whiteList[_i];
        if (src === origin) {
          isWhite = true;
          break;
        }
      }
      return isWhite;
    };

    return Server;

  })();
  return module.exports = Server;
});
