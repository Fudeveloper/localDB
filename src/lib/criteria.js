// Generated by CoffeeScript 1.7.1
var Criteria, Utils,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Utils = require('./utils');

Criteria = {};

Criteria.check = function(obj, criteria) {
  var c, c_key, c_value, condition, f, flag, key, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
  for (key in criteria) {
    condition = criteria[key];
    if (Utils.isString(condition) || Utils.isNumber(condition)) {
      if ((obj[key] != null) && obj[key] === condition) {
        continue;
      } else {
        return false;
      }
    }
    if (Utils.isRegex(condition)) {
      if (condition.test(obj[key])) {
        continue;
      } else {
        return false;
      }
    }
    flag = true;
    switch (key) {
      case "$and":
        for (_i = 0, _len = condition.length; _i < _len; _i++) {
          c = condition[_i];
          if (!Criteria.check(obj, c)) {
            return false;
          }
        }
        break;
      case "$not":
        if (Criteria.check(obj, condition)) {
          return false;
        }
        break;
      case "$nor":
        for (_j = 0, _len1 = condition.length; _j < _len1; _j++) {
          c = condition[_j];
          if (Criteria.check(obj, c)) {
            return false;
          }
        }
        break;
      case "$or":
        f = false;
        for (_k = 0, _len2 = condition.length; _k < _len2; _k++) {
          c = condition[_k];
          if (!(Criteria.check(obj, c))) {
            continue;
          }
          f = true;
          break;
        }
        if (!f) {
          return false;
        }
        break;
      default:
        flag = false;
    }
    if (flag) {
      continue;
    }
    for (c_key in condition) {
      c_value = condition[c_key];
      switch (c_key) {
        case "$gt":
          if (obj[key] <= c_value) {
            return false;
          }
          break;
        case "$gte":
          if (obj[key] < c_value) {
            return false;
          }
          break;
        case "$lt":
          if (obj[key] >= c_value) {
            return false;
          }
          break;
        case "$lte":
          if (obj[key] > c_value) {
            return false;
          }
          break;
        case "$ne":
          if (obj[key] === c_value) {
            return false;
          }
          break;
        case "$in":
          if (_ref = obj[key], __indexOf.call(c_value, _ref) < 0) {
            return false;
          }
          break;
        case "$nin":
          if (_ref1 = obj[key], __indexOf.call(c_value, _ref1) >= 0) {
            return false;
          }
          break;
        case "$exist":
          if (c_value !== (obj[key] != null)) {
            return false;
          }
          break;
        case "$type":
          if (!Utils.isType(obj[key], c_value)) {
            return false;
          }
          break;
        case "$mod":
          if (obj[key] % c_value[0] !== c_value[1]) {
            return false;
          }
          break;
        case "$regex":
          if (!(new RegExp(c_value)).test(obj[key])) {
            return false;
          }
          break;
        default:
          if (!Criteria.check(obj[key], JSON.parse("{\"" + c_key + "\": " + (JSON.stringify(c_value)) + "}"))) {
            return false;
          }
      }
    }
  }
  return true;
};

module.exports = Criteria;
