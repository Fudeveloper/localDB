// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  "use strict";
  var Collection, Engine, LocalDB, Server, Support, Utils, dbPrefix, version;
  Support = require("lib/support");
  Utils = require("core/utils");
  Collection = require("core/collection");
  Engine = require("core/engine");
  Server = require("core/server");
  dbPrefix = "ldb_";
  version = "";

  /**
   *  @class LocalDB
   *  @classdesc LocalDB用来生成数据库对象
   *  @author [wh1100717]{@link https://github.com/wh1100717}
   *  @param  {String}    dbName - 数据库名
   *  @param  {Object}    [options] 配置参数
   *  @param  {String}    [options.expire="window"] - "window"：数据随着当前页面标签关闭而消失, "none"：数据会一直存在对应的域内，不随着页面或者浏览器关闭而消失。
   *  @param  {Boolean}   [options.encrypt=true] - true：对存储的数据进行加密操作
   *  @param  {String}    [options.proxy=null] - 指定proxy url来进行跨域数据存取，具体请参考@todo Proxy文档
   *  @return {LocalDB}
   *  @example
  ```javascript
  var db = new LocalDB("foo")
  var db = new LocaoDB("foo", {
     expire: "window",
     encrypt: true,
     proxy: "http://www.foo.com/getProxy.html"
  })
  ```
   *  @todo 增加 options.expire 对"browser"的支持，数据可以在可以在同一个域的多个页面之间共享，但随着浏览器关闭而消失。
   *  @todo 增加 options.expire 对"Date()"的支持，数据可以在指定日期内一直存在。
   */
  LocalDB = (function() {
    function LocalDB(dbName, options) {
      if (options == null) {
        options = {};
      }
      if (dbName == null) {
        throw new Error("dbName should be specified.");
      }
      this.name = dbPrefix + dbName;
      this.expire = options.expire != null ? options.expire : "window";
      this.encrypt = options.encrypt != null ? options.encrypt : true;
      this.proxy = options.proxy != null ? options.proxy : null;
      this.insert_guarantee = options.guarantee ? options.guarantee : false;
      this.engine = new Engine({
        expire: this.expire,
        encrypt: this.encrypt,
        name: this.name,
        proxy: this.proxy,
        insert_guarantee: this.insert_guarantee
      });
    }


    /**
     *  @function LocalDB#options
     *  @desc get options
     *  @instance
     *  @return {Object}
     *  @example
     var db = new LocalDB("foo")
     var options = db.options()
     console.log(options)
     */

    LocalDB.prototype.options = function() {
      return {
        name: this.name.substr(dbPrefix.length),
        expire: this.expire,
        encrypt: this.encrypt,
        proxy: this.proxy
      };
    };


    /**
     *  @function LocalDB#collection
     *  @desc get collection
     *  @instance
     *  @param {String} collectionName - collection Name
     *  @return {Collection}    Instance of Collection Class
     *  @example
     var db = new LocalDB("foo")
     var collection = db.collection("bar")
     console.log(typeof collection)
     */

    LocalDB.prototype.collection = function(collectionName) {
      if (collectionName == null) {
        throw new Error("collectionName should be specified.");
      }
      return new Collection(collectionName, this.engine);
    };


    /*
     *  Delete Collection: db.drop(collectionName)
     *  Delete DB: db.drop()
     */

    return LocalDB;

  })();

  /**
   *  @function LocalDB.getSupport
   *  @desc Check Browser Feature Compatibility
   *  @return {Support}
   *  @example
   if(LocalDB.getSupport().localstorage()){
      alert("Your Browser support LocalStorage!")
   }
   */
  LocalDB.getSupport = function() {
    return Support;
  };

  /**
   *  @function LocalDB.getVersion
   *  @desc Get LocalDB version
   *  @return {String}
   *  @example
   console.log("The version of LocalDB is:", LocalDB.getVersion())
   */
  LocalDB.getVersion = function() {
    return version;
  };

  /**
   *  @function LocalDB.getTimestamp
   *  @desc Convert ObjectId to timestamp
   *  @param {String} objectId
   *  @return {Number}
   */
  LocalDB.getTimestamp = function(objectId) {
    return Utils.getTimestamp(objectId);
  };

  /**
   *  @function LocalDB.getTime
   *  @desc Convert ObjectId to time
   *  @param {String} objectId
   *  @return {String}
   */
  LocalDB.getTime = function(objectId) {
    return Utils.getTime(objectId);
  };

  /**
   *  @function LocalDB.init
   *  @desc Proxy Server Init
   *  @param {Object} config
   */
  LocalDB.init = function(config) {
    return (new Server(config)).init();
  };
  return module.exports = LocalDB;
});
