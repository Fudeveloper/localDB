// Generated by CoffeeScript 1.7.1
define(function(require, exports, module) {
  'use strict';
  var Collection, Engine, LocalDB, Support, Utils, dbPrefix;
  Utils = require('lib/utils');
  Collection = require('lib/collection');
  Engine = require('lib/engine');
  Support = require('lib/support');
  dbPrefix = "ldb_";
  LocalDB = (function() {

    /*
     *  Constructor
     *  var db = new LocalDB('foo')
     *  var db = new LocalDB('foo', {type: 1})
     *  var db = new LocalDB('foo', {type: 2})
     *
     *  Engine will decide to choose the best waty to handle the data automatically.
     *  when type is 1, the data will be alive while browser stay open. e.g. sessionStorage
     *  when type is 2, the data will be alive even after browser is closed. e.g. localStorage
     *  1 by default
     */
    function LocalDB(dbName, options) {
      if (options == null) {
        options = {};
      }
      if (dbName === void 0) {
        throw new Error("dbName should be specified.");
      }
      this.name = dbPrefix + dbName;
      this.ls = new Engine(options);
    }

    LocalDB.prototype.options = function() {
      return {
        name: this.name.substr(dbPrefix.length),
        session: this.ls.session
      };
    };


    /*
     *  Get Collection
     *  var collection = db.collection('bar')
     */

    LocalDB.prototype.collection = function(collectionName) {
      return new Collection(collectionName, this);
    };


    /*
     *  Delete Collection: db.drop(collectionName)
     *  Delete DB: db.drop()
     */

    return LocalDB;

  })();

  /*
   *  Check Browser Compatibility
   *  use LocalDB.isSupport() to check whether the browser support LocalDB or not.
   */
  LocalDB.support = function() {
    return {
      localStorage: Support.localstorage(),
      sessionStorage: Support.sessionstorage(),
      postMessage: Support.postmessage(),
      webSql: Support.websqldatabase(),
      indexedDB: Support.indexedDB(),
      applicationCache: Support.applicationcache(),
      userdata: Support.userdata()
    };
  };

  /*
   *  Get Timestamp
   *  Convert ObjectId to timestamp
   */
  LocalDB.getTimestamp = function(objectId) {
    return Utils.getTimestamp(objectId);
  };

  /*
   *  Get Time
   *  Convert ObjectId to time
   */
  LocalDB.getTime = function(objectId) {
    return Utils.getTime(objectId);
  };
  return module.exports = LocalDB;
});
