// Generated by CoffeeScript 1.7.1

/*
 * localDB
 * localDB.emptystack.net
 *
 * Copyright (c) 2014 Eric Wang
 * Licensed under the MIT license.
 */

/*localStorage API
 * setItem(key, val)
 * getItem(key)
 * removeItem(key)
 * clear()
 * key(index)
 * length
 */
define(function(require, exports, module) {
  'use strict';
  var criteriaCheck, dbPrefix, isArray, isFunction, isNumber, isObject, isString, isType, localDB, ls, parse, stringify, _isType;
  ls = window.localStorage;
  dbPrefix = "ldb_";
  _isType = function(type) {
    return function(obj) {
      return {}.toString.call(obj) === ("[object " + (type.toLowerCase().replace(/\w/, function(w) {
        return w.toUpperCase();
      })) + "]");
    };
  };
  isType = function(ele, type) {
    return _isType(type)(ele);
  };
  isObject = _isType("object");
  isString = _isType("string");
  isArray = _isType("array");
  isFunction = _isType("function");
  isNumber = _isType("number");
  parse = function(str) {
    if ((str != null) && isString(str)) {
      return JSON.parse(str);
    } else {
      return [];
    }
  };
  stringify = function(obj) {
    if ((obj != null) && isArray(obj)) {
      return JSON.stringify(obj);
    } else {
      return "[]";
    }
  };
  criteriaCheck = function(obj, criteria) {
    var c_key, c_value, condition, key;
    for (key in criteria) {
      condition = criteria[key];
      for (c_key in condition) {
        c_value = condition[c_key];
        switch (c_key) {
          case "$gt":
            if (obj[key] <= c_value) {
              return false;
            }
            break;
          case "$gte":
            if (obj[key] < c_value) {
              return false;
            }
            break;
          case "$lt":
            if (obj[key] >= c_value) {
              return false;
            }
            break;
          case "$lte":
            if (obj[key] > c_value) {
              return false;
            }
            break;
          case "$ne":
            if (obj[key] === c_value) {
              return false;
            }
            break;
          case "$eq":
            if (obj[key] !== c_value) {
              return false;
            }
        }
      }
    }
    return true;
  };
  localDB = localDB || function(dbName, storageType) {
    ls = storageType;
    this.db = dbPrefix + dbName;
    if (ls.getItem(this.db) == null) {
      ls.setItem(this.db, "_");
    }
    this.length = function() {
      return this.collections().length;
    };
  };
  localDB.isSupport = function() {
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      return true;
    } else {
      return false;
    }
  };
  localDB.prototype.drop = function(collectionName) {
    var i, j, keys, _i, _len;
    collectionName = collectionName != null ? "_" + collectionName : "";
    keys = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (ls.key(i).indexOf(this.db + collectionName) === 0) {
          _results.push(ls.key(i));
        }
      }
      return _results;
    }).call(this);
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      j = keys[_i];
      ls.removeItem(j);
    }
  };
  localDB.prototype.collections = function() {
    var i, _i, _ref, _results;
    if (this.db != null) {
      _results = [];
      for (i = _i = 0, _ref = ls.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (ls.key(i).indexOf("" + this.db + "_") === 0) {
          _results.push(ls.key(i));
        }
      }
      return _results;
    } else {
      return [];
    }
  };
  localDB.prototype.insert = function(collectionName, rowData) {
    var collection;
    collectionName = "" + this.db + "_" + collectionName;
    collection = ls.getItem(collectionName);
    collection = parse(collection);
    collection.push(rowData);
    ls.setItem(collectionName, stringify(collection));
    return this;
  };
  localDB.prototype.find = function(collectionName, criteria, limit) {
    var c, collection, data, _i, _len;
    if (criteria == null) {
      criteria = {};
    }
    if (limit == null) {
      limit = -1;
    }
    collectionName = "" + this.db + "_" + collectionName;
    collection = ls.getItem(collectionName);
    if (collection == null) {
      collection = "[]";
    }
    collection = parse(collection);
    data = [];
    for (_i = 0, _len = collection.length; _i < _len; _i++) {
      c = collection[_i];
      if (!(criteriaCheck(c, criteria))) {
        continue;
      }
      if (limit === 0) {
        break;
      }
      limit = limit - 1;
      data.push(c);
    }
    return data;
  };
  localDB.prototype.update = function(collectionName, action, criteria) {
    var actions, c, collection, key, value, _i, _len;
    if (criteria == null) {
      criteria = {};
    }
    collectionName = "" + this.db + "_" + collectionName;
    collection = ls.getItem(collectionName);
    if (collection == null) {
      collection = "[]";
    }
    collection = parse(collection);
    for (_i = 0, _len = collection.length; _i < _len; _i++) {
      c = collection[_i];
      if (!(criteriaCheck(c, criteria))) {
        continue;
      }
      actions = action.$set;
      for (key in actions) {
        value = actions[key];
        c[key] = value;
      }
    }
    return ls.setItem(collectionName, stringify(collection));
  };
  localDB.prototype.remove = function(collectionName, criteria) {
    var c, collection;
    if (criteria == null) {
      criteria = {};
    }
    collectionName = "" + this.db + "_" + collectionName;
    collection = ls.getItem(collectionName);
    if (collection == null) {
      collection = "[]";
    }
    collection = parse(collection);
    return ls.setItem(collectionName, stringify((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = collection.length; _i < _len; _i++) {
        c = collection[_i];
        if (!criteriaCheck(c, criteria)) {
          _results.push(c);
        }
      }
      return _results;
    })()));
  };
  module.exports = localDB;
});
