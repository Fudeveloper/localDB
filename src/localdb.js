// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  "use strict";
  var Collection, Engine, LocalDB, Server, Support, Utils, dbPrefix, version;
  Support = require("lib/support");
  Utils = require("core/utils");
  Collection = require("core/collection");
  Engine = require("core/engine");
  Server = require("core/server");
  dbPrefix = "ldb_";
  version = "";
  LocalDB = (function() {

    /*
     *  Constructor
     *  var db = new LocalDB("foo")
     *  var db = new LocaoDB("foo", {
            expire: "window",
            encrypt: true,
            proxy: "http://www.foo.com/getProxy.html"
        })
     *
     *  Engine will decide to choose the best way to handle data automatically.
        *   when expire is set as "window", the data wil be alive while the window page stay open
        *   when expire is set as "none", the data will be always stored even after the browser is closed.
        *   "window" by default
        *   TODO: "browser", means the data will be alive and shared between the same origin page and disappear when the brower close.
        *   TODO: Date(), means the data will be alive until Date()
     *  The data will be stored encrypted if the encrypt options is true, true by default.
     */
    function LocalDB(dbName, options) {
      if (options == null) {
        options = {};
      }
      if (dbName == null) {
        throw new Error("dbName should be specified.");
      }
      this.name = dbPrefix + dbName;
      this.expire = options.expire != null ? options.expire : "window";
      this.encrypt = options.encrypt != null ? options.encrypt : true;
      this.proxy = options.proxy != null ? options.proxy : null;
      this.engine = new Engine({
        expire: this.expire,
        encrypt: this.encrypt,
        name: this.name,
        proxy: this.proxy
      });
    }

    LocalDB.prototype.options = function() {
      return {
        name: this.name.substr(dbPrefix.length),
        expire: this.expire,
        encrypt: this.encrypt,
        proxy: this.proxy
      };
    };


    /*
     *  Get Collection
     *  var collection = db.collection("bar")
     */

    LocalDB.prototype.collection = function(collectionName) {
      if (collectionName == null) {
        throw new Error("collectionName should be specified.");
      }
      return new Collection(collectionName, this.engine);
    };


    /*
     *  Delete Collection: db.drop(collectionName)
     *  Delete DB: db.drop()
     */

    return LocalDB;

  })();

  /*
   *  Check Browser Feature Compatibility
   */
  LocalDB.getSupport = function() {
    return Support;
  };

  /*
   *  Version
   */
  LocalDB.getVersion = function() {
    return version;
  };

  /*
   *  Get Timestamp
   *  Convert ObjectId to timestamp
   */
  LocalDB.getTimestamp = function(objectId) {
    return Utils.getTimestamp(objectId);
  };

  /*
   *  Get Time
   *  Convert ObjectId to time
   */
  LocalDB.getTime = function(objectId) {
    return Utils.getTime(objectId);
  };

  /*
   *  Proxy Server Init
   *  LocalDB.init({
          allow: ["*.baidu.com", "pt.aliexpress.com"]
          deny: ["map.baidu.com"]
      })
   */
  LocalDB.init = function(config) {
    return (new Server(config)).init();
  };
  return module.exports = LocalDB;
});
